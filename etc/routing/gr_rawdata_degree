#!/bin/bash

###########################
#(C) Will Cunningham 2016 #
#         DK Lab          #
# Northeastern University #
###########################

# Generate a raw data table for a constant-degree routing experiment

set -u -o pipefail

if [[ "$#" -lt 5 ]] ; then
  echo "Arguments are [jobstart] [jobend] [degree] [spacetime] [version]."
  exit 1
fi

jobstart=$1
jobend=$2
degree=$3
spacetime=$4
version=$5

declare -a tau
declare -a nodes
declare -a alpha
declare -a densities
declare -a success1 err1
declare -a success2 err2

basedir='/gss_gpfs_scratch/cunningham'
homedir=$CAUSET_HOME_DIR

if [[ ! -d $basedir ]] ; then
  echo "Base directory does not exist!"
  exit 2
fi

for i in $(seq $jobstart $jobend) ; do
  dir=$basedir/causet${i}
  if [[ ! -d $dir ]] ; then
    echo "Could not find directory: $dir"
    exit 3
  fi

  cd $dir
  if [[ ! -e $dir/causet${i}.err ]] ; then
    echo "It appears job $i is still running."
    exit 6
  fi

  if [[ -s $dir/causet${i}.err ]] ; then
    echo "Error detected in job $i"
    cat $dir/causet${i}.err
    echo "Continue? [y/n]"
    read response
    if [[ "$response" != "y" ]] ; then
      exit 5
    fi
  fi

  nsamples=$(ls $dir/dat/*.cset.out 2> /dev/null | wc -l)
  if [[ $nsamples -lt 10 ]] ; then
    #echo "No data found!"
    echo "Fewer than 10 samples found."
    exit 4
  fi

  logfile=$dir/CausalSet_Job-${i}_Sample-1.log

  tau+=($(awk '/Max. Rescaled Time:/ {print $5}' $logfile))
  nodes+=($(awk '/Number of Nodes:/ {print $6}' $logfile))
  alpha+=($(awk '/Spatial Scaling:/ {print $4}' $logfile))
  #alpha+=($(awk '/Spatial Cutoff:/ {print $4}' $logfile))
  densities+=($(awk '/Node Density:/ {print $4}' $logfile))
  s1=($(./etc/success 1 | awk '/Success Ratio:/ {print $3, $5}'))
  success1+=(${s1[0]})
  err1+=(${s1[1]})
  s2=($(./etc/success 2 | awk '/Success Ratio:/ {print $3, $5}'))
  success2+=(${s2[0]})
  err2+=(${s2[1]})
done

outfile=$homedir/navigation_k-${degree}_${spacetime}_${version}.cset.suc.raw
echo "Job Time Nodes Cutoff Density Success1 Error1 Success2 Error2" >> $outfile
njobs=$(($jobend-$jobstart+1))
for (( i=0 ; i<$njobs ; i++ )) ; do
  job=$(($i+$jobstart))
  echo "$job ${tau[$i]} ${nodes[$i]} ${alpha[$i]} ${densities[$i]} ${success1[$i]} ${err1[$i]} ${success2[$i]} ${err2[$i]}" >> $outfile
done
