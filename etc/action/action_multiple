#!/usr/bin/env python

###########################
#(C) Will Cunningham 2015 #
#         DK Lab          #
# Northeastern University #
###########################

# Calculates the average and standard error of the action over several lk
# Note this script should only be used for the smeared action
# Data is put in a good form for plotting in Mathematica

import glob
import math
import numpy as np
import os
import sys

basedir = '/scratch/cunningham/'
#basedir = '/krioukov/will/'

if (len(sys.argv) < 4):
	sys.stdout.write('Arguments are [jobstart] [jobend] [stdim].\n')
	sys.exit(0)

jobStart = int(sys.argv[1])
jobEnd = int(sys.argv[2])
stdim = int(sys.argv[3])

if not (stdim == 2 or stdim == 3 or stdim == 4):
	sys.stdout.write('Invalid parameter: [stdim]\n');
	sys.exit(1)

new = False
if len(sys.argv) == 5 and str(sys.argv[4]) == 'new':
	new = True

# Range of job numbers (inclusive)
njobs = jobEnd - jobStart + 1

# Range of lk to use (inclusive)
lkmin = 5
lkmax = 13
lkstep = 1
nlk = int((lkmax - lkmin + 1) / lkstep)

action = np.zeros((nlk, njobs))
err = np.zeros((nlk, njobs))

for lk in range(lkmin, lkmax + lkstep, lkstep):	
	epsilon = math.pow(lk, -stdim)
	eps1 = epsilon / (1.0 - epsilon)

	for job in range(jobStart, jobEnd + 1):
		files = glob.glob(basedir + 'causet' + str(job) + '/dat/act/*.cset.act.dat')
		a = np.zeros(len(files))
		c = []
		n = 0
		a_idx = 0

		for file in files:
			f = open(file)
			lines = f.readlines()

			c = []
			c_idx = 0

			for line in lines:
				c.append(int(line))
				c_idx += 1

			f.close()

			for i in range(0, c[0] - 2):
				ni = float(c[i+1])
				if stdim == 2:
					if not new:
						a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (1.0 - 2.0 * eps1 * i + 0.5 * eps1 * eps1 * i * (i - 1.0))
					else:
						a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (1.0 - 4.0 * eps1 * i + 2.5 * eps1 * eps1 * i * (i - 1.0) - (1.0 / 3.0) * eps1 * eps1 * eps1 * i * (i - 1.0) * (i - 2.0))
				elif stdim == 3:
					if not new:
						a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (1.0 - 27.0 * eps1 * i / 8.0 + 9.0 * eps1 * eps1 * i * (i - 1.0) / 8.0)
					else:
						a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (-(5.0 / 4.0) + (225.0 / 16.0) * eps1 * i - (225.0 / 16.0) * eps1 * eps1 * i * (i - 1.0) + (81.0 / 32.0) * eps1 * eps1 * eps1 * i * (i - 1.0) * (i - 2.0))
				elif stdim == 4:
					a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (1.0 - 9.0 * eps1 * i + 8.0 * eps1 * eps1 * i * (i - 1.0) - (4.0 / 3.0) * eps1 * eps1 * eps1 * i * (i - 1.0) * (i - 2.0))

			if stdim == 2:
				if not new:
					a[a_idx] = 2.0 * epsilon * (c[0] - 2.0 * epsilon * a[a_idx])
				else:
					a[a_idx] = -2.0 * epsilon * (c[0] - 6.0 * epsilon * a[a_idx])
			elif stdim == 3:
				if not new:
					a[a_idx] = (math.pow(math.pi / (3.0 * math.sqrt(2.0)), 2.0 / 3.0) / math.gamma(5.0 / 3.0)) * (math.pow(epsilon, 2.0 / 3.0) * c[0] - math.pow(epsilon, 5.0 / 3.0) * a[a_idx])
				else:
					a[a_idx] = (4.0 / 3.0) * (math.pow(math.pi / (3.0 * math.sqrt(2.0)), 2.0 / 3.0) / math.gamma(5.0 / 3.0)) * math.pow(epsilon, 2.0 / 3.0) * (c[0] - epsilon * a[a_idx])
			elif stdim == 4:
				a[a_idx] = (4.0 / math.sqrt(6.0)) * (math.sqrt(epsilon) * c[0] - math.pow(epsilon, 1.5) * a[a_idx])

			a_idx += 1

		if c[0] == 0:
			sys.stdout.write('Error: n = 0!.\n')
			sys.exit(1)

		action[int((lk-lkmin)/lkstep)][int(job-jobStart)] = np.mean(a)
		err[int((lk-lkmin)/lkstep)][int(job-jobStart)] = np.std(a) #/ math.sqrt(len(files))

basedir = os.environ['CAUSET_HOME']

if stdim == 2:
	filename = 'd2_'
elif stdim == 3:
	filename = 'd3_'
elif stdim == 4:
	filename = 'd4_'
filename += 'smeared'
if new:
	filename += '_v2'

f = open(basedir + '/action_' + filename + '.cset.act.ref', 'a')
g = open(basedir + '/stderr_' + filename + '.cset.act.ref', 'a')
for i in range(nlk):
	for j in range(njobs):
		f.write(str(action[i][j]) + ' ')
		g.write(str(err[i][j]) + ' ')
	f.write('\n')
	g.write('\n')
f.close()
g.close()

sys.stdout.write('Completed ACT2.\n')
