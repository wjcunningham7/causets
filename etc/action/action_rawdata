#!/bin/bash

###########################
#(C) Will Cunningham 2016 #
#         DK Lab          #
# Northeastern University #
###########################

# Generate a raw data table for an action experiment

set -eu -o pipefail

if [[ "$#" -lt 5 ]] ; then
  echo "Arguments are [jobstart] [jobend] [100*eta0] [spacetime] [version]."
  exit 1
fi

jobstart=$1
jobend=$2
eta0=$3
spacetime=$4
version=$5

declare -a nodes
declare -a degrees kerr
declare -a sigma serr

basedir='/gss_gpfs_scratch/cunningham'
homedir=$CAUSET_HOME

if [[ ! -d $basedir ]] ; then
  echo "Base directory does not exist!"
  exit 2
fi

for i in $(seq $jobstart $jobend) ; do
  dir=$basedir/causet$i
  if [[ ! -d $dir ]] ; then
    echo "Could not find directory: $dir"
    exit 3
  fi

  if [[ ! -e $dir/causet${i}.err ]] ; then
    echo "It appears job $i is still running."
    exit 4
  fi

  if [[ -s $dir/causet${i}.err ]] ; then
    echo "Error detected in job $i"
    echo "------------------------"
    cat $dir/causet${i}.err
    echo -e "\nContinue? [y/n]"
    read response
    if [[ "$response" != "y" ]] ; then
      exit 5
    fi
  fi

  nsamples=$(ls $dir/dat/*.cset.out 2> /dev/null | wc -l)
  if [[ $nsamples -eq 0 ]] ; then
    echo "No data found!"
    exit 6
  fi

  logfile=$dir/CausalSet_Job-${i}_Sample-1.log
  stdim=$(($(awk -F '[\t+]' '/Spacetime Dimension:/ {print $4}' $logfile)+1))

  cd $dir
  nodes+=($(awk '/Number of Nodes:/ {print $6}' $logfile))
  k=($(./etc/degrees | awk '/Average/ {print $3}'))
  degrees+=(${k[0]})
  kerr+=(${k[1]})
  s=($(./etc/action_single $stdim | awk '/Average Action:/ {print $3, $5}'))
  sigma+=(${s[0]})
  serr+=(${s[1]})
done

outfile=$homedir/action_eta-${eta0}_${spacetime}_${version}.cset.act.raw
if [[ ! -e $outfile ]] ; then
  echo "Job Nodes Degree Error Action Error" >> $outfile
else
  echo "Output file already exists. Continue? [y/n]"
  read response
  if [[ "$response" != "y" ]] ; then
    exit 7
  fi
fi
njobs=$(($jobend-$jobstart+1))
for (( i=0 ; i<$njobs ; i++ )) ; do
  job=$(($i+$jobstart))
  echo "$job ${nodes[$i]} ${degrees[$i]} ${kerr[$i]} ${sigma[$i]} ${serr[$i]}" >> $outfile
done
