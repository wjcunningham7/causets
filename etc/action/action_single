#!/usr/bin/env python

###########################
#(C) Will Cunningham 2015 #
#         DK Lab          #
# Northeastern University #
###########################

# Concatenates cardinalities, and then calculates average action and std. dev.

import glob
import math
import numpy as np
import sys

smeared = True

if len(sys.argv) < 2:
	sys.stdout.write('Specify the spacetime dimension.\n')
	sys.exit(1)

stdim = int(sys.argv[1])

if not (stdim == 2 or stdim == 4):
	sys.stdout.write('Invalid parameter: [stdim]');
	sys.exit(2)

basedir = ''
act_files = glob.glob(basedir + 'dat/act/*.cset.act.dat')
a = []
c = []

if len(act_files) == 0:
	sys.stdout.write('No files found.\n')
	sys.exit(3)

# Array of actions
for i in range(0,len(act_files)):
	a.append(0)

a_idx = 0
for file in act_files:
	h = open(file)
	lines = h.readlines()
	c_idx = 0
	for line in lines:
		c.append(int(line))
		c_idx += 1
	h.close()
	
	if smeared:
		lk = 4.0
		epsilon = math.pow(lk, -stdim)
		eps1 = epsilon / (1.0 - epsilon)
		for i in range(0, c[0] - 2):
			ni = float(c[i+1])
			if stdim == 2:
				a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (1.0 - 2.0 * eps1 * i + 0.5 * eps1 * eps1 * i * (i - 1.0))
			elif stdim == 4:
				a[a_idx] += ni * math.pow(1.0 - epsilon, i) * (1.0 - 9.0 * eps1 * i + 8.0 * eps1 * eps1 * i * (i - 1.0) - (4.0 / 3.0) * eps1 * eps1 * eps1 * i * (i - 1.0) *  (i - 2.0))

		if stdim == 2:
			a[a_idx] = 2.0 * epsilon * (c[0] - 2.0 * epsilon * a[a_idx])
		elif stdim == 4:
			a[a_idx] = (4.0 / math.sqrt(6.0)) * (math.sqrt(epsilon) * c[0] - math.pow(epsilon, 1.5) * a[a_idx])
	else:
		if stdim == 2:
			a[a_idx] = 2.0 * (c[0] - 2.0 * (c[1] - 2.0 * c[2] + c[3]))
		elif stdim == 4:
			a[a_idx] = (4.0 / math.sqrt(6.0)) * (c[0] - c[1] + 9.0 * c[2] - 16.0 * c[3] + 8.0 * c[4])

	a_idx += 1
	c = []

avg_action = np.mean(a)
std_action = np.std(a)
stderr = std_action #/ math.sqrt(len(act_files))

basedir = './dat/ref/'

if stdim == 2:
	filename = 'd2_'
elif stdim == 4:
	filename = 'd4_'

if smeared:
	filename += 'smeared'
else:
	filename += 'local'

h = open(basedir + 'actdist_' + filename + '.cset.act.ref','w')
for i in range(0,len(act_files)):
	h.write(str(a[i]) + '\n')
h.close()

sys.stdout.write('Average Action: %f \xC2\xB1 %f\n' % (avg_action, stderr))
sys.stdout.write('Completed ACT.\n')
